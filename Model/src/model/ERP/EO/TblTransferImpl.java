package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 08 14:31:11 PKT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblTransferImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Vno,
        Vtp,
        Dated,
        Narration,
        FrDepartmentId,
        FrCompanySbuId,
        EmpId,
        ToDepartmentId,
        ToCompanySbuId,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        TblEmp;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int VNO = AttributesEnum.Vno.index();
    public static final int VTP = AttributesEnum.Vtp.index();
    public static final int DATED = AttributesEnum.Dated.index();
    public static final int NARRATION = AttributesEnum.Narration.index();
    public static final int FRDEPARTMENTID = AttributesEnum.FrDepartmentId.index();
    public static final int FRCOMPANYSBUID = AttributesEnum.FrCompanySbuId.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int TODEPARTMENTID = AttributesEnum.ToDepartmentId.index();
    public static final int TOCOMPANYSBUID = AttributesEnum.ToCompanySbuId.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int TBLEMP = AttributesEnum.TblEmp.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblTransferImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblTransfer");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Vno, using the alias name Vno.
     * @return the value of Vno
     */
    public BigDecimal getVno() {
        return (BigDecimal) getAttributeInternal(VNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Vno.
     * @param value value to set the Vno
     */
    public void setVno(BigDecimal value) {
        setAttributeInternal(VNO, value);
    }

    /**
     * Gets the attribute value for Vtp, using the alias name Vtp.
     * @return the value of Vtp
     */
    public String getVtp() {
        return (String) getAttributeInternal(VTP);
    }

    /**
     * Sets <code>value</code> as the attribute value for Vtp.
     * @param value value to set the Vtp
     */
    public void setVtp(String value) {
        setAttributeInternal(VTP, value);
    }

    /**
     * Gets the attribute value for Dated, using the alias name Dated.
     * @return the value of Dated
     */
    public Timestamp getDated() {
        return (Timestamp) getAttributeInternal(DATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dated.
     * @param value value to set the Dated
     */
    public void setDated(Timestamp value) {
        setAttributeInternal(DATED, value);
    }

    /**
     * Gets the attribute value for Narration, using the alias name Narration.
     * @return the value of Narration
     */
    public String getNarration() {
        return (String) getAttributeInternal(NARRATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Narration.
     * @param value value to set the Narration
     */
    public void setNarration(String value) {
        setAttributeInternal(NARRATION, value);
    }

    /**
     * Gets the attribute value for FrDepartmentId, using the alias name FrDepartmentId.
     * @return the value of FrDepartmentId
     */
    public BigDecimal getFrDepartmentId() {
        return (BigDecimal) getAttributeInternal(FRDEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FrDepartmentId.
     * @param value value to set the FrDepartmentId
     */
    public void setFrDepartmentId(BigDecimal value) {
        setAttributeInternal(FRDEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for FrCompanySbuId, using the alias name FrCompanySbuId.
     * @return the value of FrCompanySbuId
     */
    public Number getFrCompanySbuId() {
        return (Number) getAttributeInternal(FRCOMPANYSBUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FrCompanySbuId.
     * @param value value to set the FrCompanySbuId
     */
    public void setFrCompanySbuId(Number value) {
        setAttributeInternal(FRCOMPANYSBUID, value);
    }

    /**
     * Gets the attribute value for EmpId, using the alias name EmpId.
     * @return the value of EmpId
     */
    public BigDecimal getEmpId() {
        return (BigDecimal) getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpId.
     * @param value value to set the EmpId
     */
    public void setEmpId(BigDecimal value) {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for ToDepartmentId, using the alias name ToDepartmentId.
     * @return the value of ToDepartmentId
     */
    public BigDecimal getToDepartmentId() {
        return (BigDecimal) getAttributeInternal(TODEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToDepartmentId.
     * @param value value to set the ToDepartmentId
     */
    public void setToDepartmentId(BigDecimal value) {
        setAttributeInternal(TODEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for ToCompanySbuId, using the alias name ToCompanySbuId.
     * @return the value of ToCompanySbuId
     */
    public BigDecimal getToCompanySbuId() {
        return (BigDecimal) getAttributeInternal(TOCOMPANYSBUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToCompanySbuId.
     * @param value value to set the ToCompanySbuId
     */
    public void setToCompanySbuId(BigDecimal value) {
        setAttributeInternal(TOCOMPANYSBUID, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity TblEmpImpl.
     */
    public TblEmpImpl getTblEmp() {
        return (TblEmpImpl) getAttributeInternal(TBLEMP);
    }

    /**
     * Sets <code>value</code> as the associated entity TblEmpImpl.
     */
    public void setTblEmp(TblEmpImpl value) {
        setAttributeInternal(TBLEMP, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number userId = null;
                Number sbuId = null;
                 try {
                     userId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                     
                     sbuId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessSBUID"));
                 } catch(Exception ex) {
                     ex.printStackTrace();
                 }
                 
                 if (operation == DML_INSERT) {

                     setFrCompanySbuId(sbuId);

                     setCreatedBy(userId);
                     setUpdatedBy(userId);
                     } else if(operation == DML_UPDATE) {
                     
                     setFrCompanySbuId(sbuId);
                     
                     setUpdatedBy(userId);
                 }
        super.doDML(operation, e);
    }
}

